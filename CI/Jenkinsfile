pipeline {
    agent any

    environment {
        // Docker Hub credentials ID (configure in Jenkins -> Credentials)
        DOCKER_HUB_CREDENTIALS = 'dockerhub-credentials'
        DOCKER_HUB_USER = 'ghandrisemh'
        IMAGE_NAME = 'ghandrisemh/angular-devops'
        IMAGE_TAG = 'latest'

        // SonarQube installation name (configure in Jenkins -> Manage Jenkins -> Configure System)
        SONARQUBE_ENV = 'SonarQube'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/TyreX6/angular-devops.git'
            }
        }

        stage('Install Dependencies') {
            agent {
                docker {
                    image 'node:20'
                }
            }
            steps {
                sh 'npm install'
            }
        }

        stage('Build & Test') {
            agent {
                docker {
                    image 'node:20'
                }
            }
            steps {
                sh 'npm run build-prod'
                stash includes: 'dist/**', name: 'angular-devops-dist'
            }
        }

        stage('SonarQube analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:latest'
                    args '-u root --network=devops_network'
                    // -u root (run as root inside container if needed)
                    // --network=host (so container can reach SonarQube on host machine)
                }
            }
            environment {
                SONAR_HOST_URL = 'http://sonarqube:9000'  // change if needed
                SONAR_TOKEN    = credentials('sonarqube')  // Jenkins credential ID
            }
            steps {
                sh """
                sonar-scanner \
                      -Dsonar.projectKey=angular-devops \
                      -Dsonar.projectName=angular-devops \
                      -Dsonar.sources=src \
                      -Dsonar.typescript.tsconfigPath=tsconfig.json \
                      -Dsonar.exclusions=node_modules/** \
                      -Dsonar.host.url=${SONAR_HOST_URL} \
                      -Dsonar.login=${SONAR_TOKEN}
                      """
            }
        }

        stage('Build Docker Image') {
            steps {
                unstash 'angular-devops-dist'
                script {
                    sh "ls -l"
                    sh "pwd"
                    sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"
                        sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}

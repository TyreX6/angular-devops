pipeline {
    agent any

    options {
        timestamps()               // Adds timestamps to console output
    }

    environment {
        // Docker Hub credentials ID (configure in Jenkins -> Credentials)
        DOCKER_HUB_CREDENTIALS = 'dockerhub-credentials'
        DOCKER_HUB_USER        = 'ghandrisemh'
        IMAGE_NAME             = 'ghandrisemh/angular-devops'
        IMAGE_TAG              = 'latest'

        // SonarQube installation name (configure in Jenkins -> Manage Jenkins -> Configure System)
        SONARQUBE_ENV = 'SonarQube'

        // Build environment
        BUILD_ENV = 'PROD'
    }

    stages {
        // --------------------------
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        // --------------------------
        stage('Parallel Stages') {
            failFast true
            parallel {
                stage('Install Dependencies') {
                    agent {
                        docker {
                            image 'node:20'
                        }
                    }
                    steps {
                        sh 'npm install'
                    }
                }

                stage('SonarQube Analysis') {
                    agent {
                        docker {
                            image 'sonarsource/sonar-scanner-cli:latest'
                            args '-u root --network=devops_network'
                        }
                    }
                    environment {
                        SONAR_HOST_URL = 'http://sonarqube:9000'
                        SONAR_TOKEN    = credentials('sonarqube')
                    }
                    when {
                        anyOf {
                            buildingTag() // any tag
                            branch 'master'
                            branch 'develop'
                            branch pattern: "feature/.*", comparator: "REGEXP"
                        }
                    }
                    steps {
                        script {
                            echo "üöÄ Scanning the project"
                            sh """
                                sonar-scanner \
                                  -Dsonar.projectKey=angular-devops \
                                  -Dsonar.projectName=angular-devops \
                                  -Dsonar.sources=src \
                                  -Dsonar.exclusions=node_modules/** \
                                  -Dsonar.typescript.tsconfigPath=tsconfig.json \
                                  -Dsonar.host.url=${SONAR_HOST_URL} \
                                  -Dsonar.login=${SONAR_TOKEN}
                            """
                        }
                    }
                }
            }
        }

        // --------------------------
        stage('Build & Test') {
            agent {
                docker {
                    image 'node:20'
                }
            }
            steps {
                sh 'npm run build-prod'
                stash includes: 'dist/**', name: 'angular-devops-dist'
            }
        }

        // --------------------------
        stage('Build Docker Image') {
            steps {
                unstash 'angular-devops-dist'
                script {
                    sh "pwd"
                    env.COMMIT_SHA = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                    // Dynamically set the image tag: use TAG_NAME if building a tag, otherwise BUILD_ENV-COMMIT_SHA
                    if (env.TAG_NAME) {
                      echo "üì¶ Building Docker image for tag: ${env.TAG_NAME}"
                      env.FINAL_IMAGE_TAG = "${env.TAG_NAME}"
                    } else {
                      echo "üì¶ Building Docker image for branch: ${env.BRANCH_NAME}"
                      env.FINAL_IMAGE_TAG = "${BUILD_ENV}-${COMMIT_SHA}"
                    }
                    sh "docker build -t ${IMAGE_NAME}:${FINAL_IMAGE_TAG} ."
                }
            }
        }

        // --------------------------
        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([
                        usernamePassword(
                            credentialsId: "${DOCKER_HUB_CREDENTIALS}",
                            usernameVariable: 'DOCKER_USER',
                            passwordVariable: 'DOCKER_PASS'
                        )
                    ]) {
                        sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"
                        sh "docker push ${IMAGE_NAME}:${FINAL_IMAGE_TAG}"
                    }
                }
            }
        }

        // --------------------------
        stage('Update Deployment File') {
            agent any
            environment {
                GIT_REPO_NAME = "angular-devops"
                GIT_USER_NAME = "TyreX6"
            }
            when {
                expression { return env.BRANCH_NAME && env.BRANCH_NAME != "PR-*" }
            }
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'ABORTED') {
                        def deploy = input(
                            message: "Update Deployment file on Repo?",
                            ok: "Update",
                            parameters: [
                                booleanParam(defaultValue: false, description: '', name: 'UPDATE')
                            ]
                        )

                        if (deploy) {
                            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                                sh '''
                                    set -e
                                    set -x

                                    if [ -z "$COMMIT_SHA" ] || [ -z "$BUILD_ENV" ]; then
                                        echo "‚ùå Missing COMMIT_SHA or BUILD_ENV"
                                        exit 1
                                    fi

                                    git config user.email "ghandrisemh@gmail.com"
                                    git config user.name "Ghandri Sameh"

                                    # Ensure branch is up-to-date
                                    git fetch origin
                                    git checkout "$BRANCH_NAME"
                                    git rebase "origin/$BRANCH_NAME"

                                    # Update Helm values.yaml safely
                                    sed -i "s|tag: .*|tag: ${BUILD_ENV}-${COMMIT_SHA}|" helm/app/values.yaml

                                    git add helm/app/values.yaml
                                    git commit -m "Update deployment image to version ${BUILD_ENV}-${COMMIT_SHA}" || echo "No changes to commit"

                                    # Retry push to avoid transient failures
                                    n=0
                                    until [ $n -ge 3 ]
                                    do
                                        git push "https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git" "HEAD:refs/heads/$BRANCH_NAME" && break
                                        n=$((n+1))
                                        echo "‚ö†Ô∏è Push failed, retrying ($n/3)..."
                                        sleep 3
                                    done
                                '''
                            }
                        } else {
                            echo "‚è≠Ô∏è Skipped Update Deployment file"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
